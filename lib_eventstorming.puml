@startuml
!include lib_eventstorming.puml
actor Teacher as Teacher


Aggregate("Student")


    Command("CreateCourseCommand")
    Command("UpdateCourseCommand")
    Command("DeleteStudentCommand")


Command("CreateStudentPackageCommand")


    Command("ToggleNotificationCommand")
    Command("CreateStudentCommand")
    Command("UpdateStudentCommand")       
    Command("CreateCustomHolidayCommand")
    Command("UpdateCustomHolidayCommand")
    Command("DeleteCustomHolidayCommand")
    Command("AssignDayAsCustomHolidyCommand")


Teacher --> ToggleNotificationCommand

Handler("CreateCourseHandler")
Event("CourseCreatedEvent")
CreateCourseCommand --> CreateCourseHandler : "processed by"
CreateCourseHandler --> CourseCreatedEvent
Handler("UpdateCourseHandler")
Event("CourseUpdatedEvent")
UpdateCourseCommand --> UpdateCourseHandler : "processed by"
UpdateCourseHandler --> CourseUpdatedEvent
Handler("DeleteStudentHandler")
Event("StudentDeletedEvent")
DeleteStudentCommand --> DeleteStudentHandler : "processed by"
DeleteStudentHandler --> StudentDeletedEvent
Handler("UpdateStudentHandler")
Event("StudentUpdatedEvent")
UpdateStudentCommand --> UpdateStudentHandler : "processed by"
UpdateStudentHandler --> StudentUpdatedEvent
Teacher --> UpdateCustomHolidayCommand
Handler("UpdateCustomHolidayHandler") 
UpdateCustomHolidayCommand --> UpdateCustomHolidayHandler : "processed by"
Event("CustomHolidayUpdatedEvent")
UpdateCustomHolidayHandler --> CustomHolidayUpdatedEvent

Teacher --> DeleteCustomHolidayCommand
Handler("DeleteCustomHolidayHandler")
DeleteCustomHolidayCommand --> DeleteCustomHolidayHandler : "processed by"
Event("CustomHolidayDeletedEvent")
DeleteCustomHolidayHandler --> CustomHolidayDeletedEvent 
Handler("CreateCustomHolidayHandler")
Event("CustomHolidayCreatedEvent")
CreateCustomHolidayCommand --> CreateCustomHolidayHandler : "processed by"
CreateCustomHolidayHandler --> CustomHolidayCreatedEvent
Handler("CreateStudentHandler")
Event("StudentCreatedEvent")
CreateStudentCommand --> CreateStudentHandler : "processed by"
CreateStudentHandler --> StudentCreatedEvent
Event("DayAssignedAsCustomHolidayEvent")

Handler("AssignDayAsCustomHolidyHandler")
AssignDayAsCustomHolidyCommand --> AssignDayAsCustomHolidyHandler : "processed by"
AssignDayAsCustomHolidyHandler --> DayAssignedAsCustomHolidayEvent

Handler("ToggleNotificationHandler")
ToggleNotificationCommand --> ToggleNotificationHandler  : "processed by"
Event("NotificationWasToggled")
ToggleNotificationHandler --> NotificationWasToggled

together{
    Command("CreateClassesCommand")[
        CreateClassesCommand
        --validations--
        **1.** The new total minutes of all classes cannot exceed the limit of the student package
        **2.** Cannot overlap with existing classes that the student possesses
    ]
    Aggregate("StudentPackage")
    Command("UpdateClassCommand")[
        UpdateClassCommand
        --fields--
        classId: Int,
        min: Int,
        class_status: ClassStatus,
        remark: String,
        actual_classroom: Classroom
        --validations--
        **1.** Total miniutes cannot exceed package limit
    ]
    Command("RemoveClassCommand")
    Command("UpdateStudentPackageCommand")
    Command("DuplicateClassCommand")[
      DuplicateClassCommand
      --
      <size:10><:white_check_mark:></size> Classes should not have overlap with any existing classes of all packages of a student
      
    ]
    Command("MoveClassCommand")[
        MoveClassCommand
        --fields--
        classId
        startTime
        endTime
        --validations--
        **1.** Cannot overlap with any existing classes 
    ]
    Command("MoveClassCommand")
}

Event("ClassMovedEvent")

MoveClassCommand --> Student
Student --> StudentPackage
StudentPackage --> ClassMovedEvent
Event("ClassMovedEvent")



Policy("ClassOnHolidayMustExtendPolicy")[
    Class On Holiday Must be Extended Policy
    --
    **1.** A class on a custom holiday must be extended to another day of the same time
    **2.** That day will be the same as the class being extended
]

' Position ExtendClassCommand directly below the policy
Command("ExtendClassCommand")

Policy("ExtendClassPolicy")[
    Extend Class due to Status Change Policy
    --
    **1.** When class status was changed to LEGIT_ABSENSE, an extended class will be created
    **2.** When a class was changed from LEGIT_ABSENSE back to anything else, the corresponding extended class must be removed
]


DayAssignedAsCustomHolidayEvent --> ClassOnHolidayMustExtendPolicy
ClassOnHolidayMustExtendPolicy --> ExtendClassCommand

together{
    Event("ClassExtendedEvent")
    Event("ClassUpdatedEvent")
    Event("ClassRemovedEvent")
    Event("StudentPackageUpatedEvent")
    Event("ClassesCreatedEvent")
}

Student --> StudentPackage
Teacher --> DuplicateClassCommand
DuplicateClassCommand --> Student
Event("ClassDuplicatedEvent")
Student --> ClassDuplicatedEvent
Teacher --> CreateCourseCommand
Teacher --> UpdateCourseCommand
Teacher --> CreateStudentCommand
Teacher --> UpdateStudentCommand
Teacher --> DeleteStudentCommand
Teacher --> CreateStudentPackageCommand
Teacher --> UpdateStudentPackageCommand
Teacher --> CreateClassesCommand
Teacher --> UpdateClassCommand
Teacher --> RemoveClassCommand
Teacher --> ExtendClassCommand
Teacher --> CreateCustomHolidayCommand
Teacher --> AssignDayAsCustomHolidyCommand

UpdateStudentPackageCommand --> Student
Student --> StudentPackage
CreateClassesCommand --> Student

UpdateClassCommand --> Student
RemoveClassCommand --> Student
Student --> StudentPackage
CreateStudentPackageCommand --> Student


StudentPackage --> ClassExtendedEvent
StudentPackage --> ClassUpdatedEvent
StudentPackage --> ClassRemovedEvent
StudentPackage --> StudentPackageUpatedEvent
StudentPackage --> ClassesCreatedEvent
ClassUpdatedEvent --> ExtendClassPolicy
ExtendClassPolicy --> ExtendClassCommand
ExtendClassPolicy --> RemoveClassCommand
ExtendClassCommand --> StudentPackage


ClassesCreatedEvent --> ClassOnHolidayMustExtendPolicy

actor Scheduler as Scheduler 

Command("CreateDeadlineComingNotificationCommand")[
    CreateDeadlineComingNotificationCommand
    --rules--
    **1.** When package official_endDate - today = 1month, a notification should be recorded in a table
    **2.** notification should have an identifier so that repeated notification will not be made again, e.g., {package_id}:deadline_coming:{officiend_endDdate}
]
Handler("CreateDeadlineComingNotificationHandler")
Event("DeadlineComingNotificationCreatedEvent")
CreateDeadlineComingNotificationCommand --> CreateDeadlineComingNotificationHandler
CreateDeadlineComingNotificationHandler --> DeadlineComingNotificationCreatedEvent

Scheduler --> CreateDeadlineComingNotificationCommand
StudentPackage --> ClassMovedEvent
ClassMovedEvent --> ClassOnHolidayMustExtendPolicy

Student-[hidden]down-StudentPackage

@enduml